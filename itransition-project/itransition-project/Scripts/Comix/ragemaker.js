/**
* comix Generator Scripts
*
* @version   1.9
* @author    ak4rp0v
* @created   20.12.13 2:16
* @copyright 1001mem.ru
*/
$(document).ready(function () { function ut(e, t, n, r) { var i = n - e; var s = r - t; return Math.sqrt(i * i + s * s) } function at() { if (!st) { st = true; window.setTimeout(ft, 15) } } function ft() { ct(); st = false; if (ot) { ot = false; at() } } function ct() { it.find("img").each(function () { var e = $(this).offset().left + $(this).outerWidth() / 2; var t = $(this).offset().top + $(this).outerHeight() / 2; var n = ut(e, t, nt, rt); var r = (1 - Math.min(1, Math.max(0, n / Y))) * tt + Z; $(this).css({ width: r }) }) } function qt(e) { var t = e.toDataURL("image/png"); if (e.restorePoints == undefined) { e.restorePoints = [] } e.restorePoints.push(t) } function Rt() { var e = J.find("canvas").get(0); if (e.restorePoints == undefined) { e.restorePoints = [] } T = e.restorePoints; if (T.length > 0) { var t = new Image; t.onload = function () { var n = e.getContext("2d"); Bt(); n.drawImage(t, 0, 0) }; t.src = T.pop() } } var e = $("#MyCanvas"); var t = e.get(0); var n = $("#text-container textarea"); var r = $("#stroke-color-picker"); var s = $("#stroke-color"); var o = $("#slider-brushsize"); var u = $("#brush-size"); var a = $("#brush-size-example"); var f = $("#font-size-slider"); var c = $("#font-size"); var d = $("#font-size-example"); var v = $("#fill-color-picker"); var m = $("#fill-color"); var g = $("#select-font"); var y = $(".font-example"); var E = $("#image-picker"); var S = $("#get-image"); var x = $("#select-image-group"); var T = []; var N = t.getContext("2d"); var C = false; var k = { x: null, y: null }; var L = { x: null, y: null }; var A = 5; var O = "top"; var M = "Serif"; var _ = 30; var D = $(this).parents(".image-dragger").find(".image-container img"); var P = "#000000"; var H = "#1685ad"; var B = "1"; var j = 50; var F = 50; var I = 0; var q = 1; var R = 4; var U = 2; var z = 1; var W = 30; var X = 240; var V = 0; var J = null; var K = null; t.height = 480; if ($.browser.msie) { $("#ie-error").show(); $("#image-from-url-dialog-open").hide() } $.getJSON("/comix/faces_groups", function (e) { for (var t in e) { var n = ""; if (e[t].id == B) { n = 'selected="selected"' } x.append($('<option value="' + e[t].id + '"' + n + ">" + e[t].title + "</option>")) } }); x.change(function () { B = $(this).val(); G() }); var Q = '<li><a href="javascript:void(0);"><img src="path" alt="[title]" /></a></li>'; var G = function () { E.find("ul").empty(); $.getJSON("/comix/faces?gimage_from_fileid=" + B, function (e) { for (var t = 0; t < e.length; t++) { var n = "/comix/images?img=" + e[t].file_name; var r = e[t].file_name; var i = $(Q.replace("path", n).replace("title", r).replace("title", r)); dockItem_a = i.find("a"); dockItem_a.addClass("allow-canvas-droppable"); dockItem_a.draggable({ helper: "clone", revert: "invalid", zIndex: 1e3 }); i.find("img").load(function () { dockItem_a.css({ width: $(this).width + 20 }) }); i.find("a").click(function () { Tt($(this).find("img").clone()) }); E.find("ul").append(i) } }) }; B = initial_category_id; G(); var Y = 180; var Z = 48, et = 80; var tt = et - Z; var nt, rt; var it = $("#image-picker"); var st = false, ot = false; $(document).bind("mousemove", function (e) { if (it.is(":visible")) { nt = e.pageX; rt = e.pageY; ot = true; at() } }); $("#brush-dialog").dialog({ autoOpen: false, position: "right" }); $("#brush-dialog-open").click(function () { xt(); $("#brush-dialog").dialog("open").dialog("widget").position({ my: "left top", at: "right top", of: "#rage-maker-container", offset: "10 170", collision: "none" }) }); $("#text-dialog").dialog({ autoOpen: false, position: "left" }); $("#text-dialog-open").click(function () { Nt(); $("#text-dialog").dialog("open") }); $("#image-from-url-dialog").dialog({ autoOpen: false, width: 400 }); $("#image-from-url-dialog-open").click(function () { $("#image-from-url-dialog").dialog("open") }); $("#layers-dialog").dialog({ autoOpen: false, width: 300, position: "right", maxWidth: 300 }); $("#layers-dialog-open").click(function () { $("#layers-dialog").dialog("open").dialog("widget").position({ my: "left top", at: "right top", of: "#rage-maker-container", offset: "10 0" }) }); $("#canvas-add-row").click(function () { pt() }); $("#canvas-remove-row").click(function () { dt() }); $("#canvas-remove-all").click(function () { if (confirm($(this).attr("data-confirm"))) { $t() } }); $(".pane-control-checkboxes").change(function () { jt() }); var ht = function (e, t) { var n = $(".pane-control-checkboxes-template").clone().addClass(t).removeClass("pane-control-checkboxes-template"); $("#rage-maker-container").append(n); n.find('[name="pcb"]').attr("checked", true).change(jt) }; var pt = function () { var e = R + 1; if (e > W * 2) return; R = e; e = U; U = Math.ceil(R / 2); if (R / 2 == U) { ht("Середина", "pcc" + U) } else { ht("Лево", "pcctl" + (U - 1)); ht("Право", "pcctr" + (U - 1)) } N.save(); t.height = X * U; jt(); N.restore() }; var dt = function () { var e = R - 1; if (e < 1) return; R = e; e = U; U = Math.ceil(R / 2); if (R / 2 < U) { $(".pcc" + e).remove() } else { $(".pcctl" + (e - 1)).remove(); $(".pcctr" + (e - 1)).remove() } N.save(); t.height = X * U; jt(); N.restore() }; var vt = function (e, t) { $("li", e).each(function () { if (this != t[0]) $(this).removeClass("ui-selected").addClass("ui-unselecting") }); t.addClass("ui-selecting"); e.data("selectable")._mouseStop(null) }; var mt = function (e, t) { V += 1; e.css("z-index", 1e3 + V); e.find(".layer-name").html(t); layers = $("#layers"); lt = $(".layers-template"); l = lt.clone(); l.removeClass("layers-template"); l.addClass("layer"); l.data("layer", e); e.data("layer-m", l); e.css("z-index", 1e3 + V); ln = l.find(".layer-name-input"); ln.val(t); ln.focus(function () { vt($("#layers"), $(this).parent("li")) }); ln.change(function () { e.find(".layer-name").html($(this).val()) }); layers.prepend(l) }; var gt = function () { $(".layer").each(function (e) { $(this).data("layer").css("z-index", 1e3 + (V - e)) }) }; var yt = function (e) { lm = e.data("layer-m"); lm.next().after(lm); gt() }; var bt = function (e) { lm = e.data("layer-m"); lm.prev().before(lm); gt() }; var wt = function (e) { V -= 1; l = e.data("layer-m"); l.remove(); e.remove() }; var Et = function (e) { J = e; $("#canvas-droppable .ui-selected").removeClass("ui-selected"); e.addClass("ui-selected") }; var St = function () { $("#canvas-droppable .ui-selected").removeClass("ui-selected") }; $("#layers").selectable({ stop: function (e, t) { $(".ui-selectee", this).not(".ui-selected").find(".layer-name-input").blur(); var n = $(".ui-selected", this).data("layer"); Et(n) } }); $("#delete-layer").click(function () { $("#layers").children(".ui-selected").each(function (e) { wt($(this).data("layer")) }) }); $("#move-layer-up").click(function () { $("#layers").children(".ui-selected").each(function (e) { bt($(this).data("layer")) }) }); $("#move-layer-down").click(function () { $("#layers").children(".ui-selected").each(function (e) { yt($(this).data("layer")) }) }); var xt = function (e) { var t = $(".canvas-dragger-template").clone(); var n = t.find(".drawcanvas-container"); var r = $("canvas", n); mt(t, "холст"); t.removeClass("canvas-dragger-template"); t.addClass("canvas-dragger"); $("#canvas-droppable .ui-selected").removeClass("ui-selected"); t.addClass("ui-selected"); t.data("showing", function () { }); t.click(function () { Et($(this)); J = $(this); K = $(this).find("canvas").get(0).getContext("2d") }); $("#canvas-droppable").append(t); t.draggable({ helper: "original" }); t.find(".canvas-dragger-close").click(function () { wt($(this).parents(".canvas-dragger")) }); t.find(".canvas-dragger-duplicate").click(function () { var e = $(this).parents(".canvas-dragger"); dupe = Gt(e); xt(dupe) }); $(".canvas-dragger-show-brushtools", t).click(function () { bd = $("#brush-dialog"); if (bd.dialog("isOpen")) { bd.dialog("close") } else { bd.dialog("open") } }); $(".canvas-dragger-undo", t).click(function () { Rt() }); $(".canvas-dragger-clearcanvas", t).click(function () { Bt() }); n.resizable({ aspectRatio: false, stop: function (e, t) { $("canvas", this).each(function () { var e = this.getContext("2d"); var n = this.toDataURL("image/png"); $(this).attr({ width: t.size.width, height: t.size.height }); var r = new Image; r.src = n; r.onload = function () { e.drawImage(r, 0, 0) } }) } }); r.mousedown(function (e) { qt(this); C = true; k = It(e, k, $(this)); return false }); r.mouseup(function () { C = false }); r.mousemove(function (e) { if (C == true) { L = It(e, L, $(this)); Mt(k, L, this.getContext("2d")); k = It(e, k, $(this)) } }); if (e != undefined) { var i = e; if (typeof i["position"] != "undefined") { var s = i["position"]; t.css({ top: s.top, left: s.left }) } var o = false; if (typeof i["size"] != "undefined") { o = i["size"]; n.css({ width: o.width, height: o.height }); if (typeof i["canvas"] != "undefined") { $("canvas", n).each(function () { var e = this.getContext("2d"); $(this).attr({ width: o.width, height: o.height }); var t = new Image; t.src = i["canvas"]; t.onload = function () { e.drawImage(t, 0, 0) } }) } } } t.show() }; $(".canvas-dragger-clearcanvas").click(function () { Bt() }); var Tt = function (e, t, n, r) { var i = $(".image-dragger-template").clone(); var s = i.find(".image-container"); mt(i, "картинка"); i.find(".image-dragger-duplicate").click(function () { var e = $(this).parents(".image-dragger"); dupe = Yt(e); Tt(dupe.image, dupe.position.top, dupe.position.left, dupe) }); i.removeClass("image-dragger-template"); i.addClass("image-dragger"); $("#canvas-droppable .ui-selected").removeClass("ui-selected"); i.addClass("ui-selected"); i.data("showing", function () { }); i.click(function () { Et($(this)) }); i.draggable({ helper: "original" }); if (t && n) { i.css({ top: t, left: n }) } i.find(".image-dragger-close").click(function () { wt($(this).parents(".image-dragger")) }); i.find(".image-dragger-flip").click(function () { var e = $(this).parents(".image-dragger").find(".image-container img"); a(e, h) }); i.find(".image-dragger-duplicate").click(function () { var e = $(this).parents(".image-dragger"); dupe = Yt(e); Tt(dupe.image, dupe.position.top, dupe.position.left, dupe) }); i.find(".image-dragger-rotatel").mousedown(function () { var e = $(this).parents(".image-dragger").find(".image-container img"); e.data("rotating", true); e.data("rotate-timeout", window.setTimeout(function () { o("l", e) }, 15)) }); i.find(".image-dragger-rotatel").mouseup(function () { var e = $(this).parents(".image-dragger").find(".image-container img"); e.data("rotating", false) }); i.find(".image-dragger-rotater").mousedown(function () { var e = $(this).parents(".image-dragger").find(".image-container img"); e.data("rotating", true); e.data("rotate-timeout", window.setTimeout(function () { o("r", e) }, 15)) }); i.find(".image-dragger-rotater").mouseup(function () { var e = $(this).parents(".image-dragger").find(".image-container img"); e.data("rotating", false) }); $("#canvas-droppable").append(i); s.empty(); s.resizable({ aspectRatio: true, resize: function (e, t) { var n = $(this).find("img"); n.css({ width: t.size.width, height: t.size.height }) } }); var o = function (e, t) { if (t.data("rotating")) { var n = t.data("rotation"); if (e == "r") n += 1; else n -= 1; var r = t.data("flipped"); if (r == undefined) r = false; t.rotate(n, r); t.data("rotation", n); window.setTimeout(function () { o(e, t) }, 15) } }; var u = function (e, t) { var n = e.data("flipped"); if (n == undefined) n = false; e.rotate(t, n); e.data("rotation", t) }; var a = function (e) { var t = e.data("flipped"); if (t == undefined) t = true; else t = !t; var n = e.data("rotation"); if (n == undefined) n = 0; e.rotate(n, t); e.data("flipped", t) }; if (e != undefined && typeof e == "string") { src = e; e = new Image; e.src = src; e = $(e); s.append(e); if (r != undefined) { var f = "auto"; var l = "auto"; var c = 0; var h = false; if (r.size != undefined) { f = r.size.width + "px"; l = r.size.height + "px" } if (r.rotation != undefined) { c = r.rotation } if (r.flipped != undefined) { h = r.flipped } e.load(function () { s.css({ width: f, height: l }); e.css({ width: f, height: l }); if (c != 0) { u(e, c) } else { e.data("rotation", c) } if (h) { a(e) } else { e.data("flipped", h) } }) } } else { e.css({ width: "auto", height: "auto" }); e.data("rotation", 0); e.data("flipped", false); s.append(e) } i.show() }; var Nt = function (e) { var t = $(".text-dragger-template").clone(); var r = t.find(".text-container"); var i = r.find("textarea"); var s = M; var o = P; var u = _; var a = "Вставить текст"; var f = 200; var l = 40; var c = 0; var h = 0; var p = 0; if (e != undefined) { if (e.font_family != undefined) s = e.font_family; if (e.font_color != undefined) o = e.font_color; if (e.font_size != undefined) u = e.font_size; if (e.text != undefined) a = e.text; if (e.rotation != undefined) p = e.rotation; if (e.size != undefined) { f = e.size.width; l = e.size.height } if (e.position != undefined) { c = e.position.top; h = e.position.left } } mt(t, "текст"); t.removeClass("text-dragger-template"); t.addClass("text-dragger"); t.addClass("ui-selected"); $("#canvas-droppable .ui-selected").removeClass("ui-selected"); J = t; t.css({ top: c + "px", left: h + "px" }); t.draggable(); t.click(function () { Et($(this)); n = i }); t.find(".text-dragger-rotatel").mousedown(function () { var e = $(this).parents(".text-dragger").find(".text-container textarea"); e.data("rotating", true); e.data("rotate-timeout", window.setTimeout(function () { v("l", e) }, 15)) }); t.find(".text-dragger-rotatel").mouseup(function () { var e = $(this).parents(".text-dragger").find(".text-container textarea"); e.data("rotating", false) }); t.find(".text-dragger-rotater").mousedown(function () { var e = $(this).parents(".text-dragger").find(".text-container textarea"); e.data("rotating", true); e.data("rotate-timeout", window.setTimeout(function () { v("r", e) }, 15)) }); t.find(".text-dragger-rotater").mouseup(function () { var e = $(this).parents(".text-dragger").find(".text-container textarea"); e.data("rotating", false) }); t.find(".text-dragger-duplicate").click(function () { var e = $(this).parents(".text-dragger"); dupe = Zt(e); Nt(dupe) }); t.data("showing", function () { }); t.find(".text-dragger-close").click(function () { wt($(this).parents(".text-dragger")) }); r.resizable({ resize: function (e, t) { var n = $(this).find("textarea"); n.css({ width: t.size.width, height: t.size.height }) } }); r.css({ width: f + 2 + "px", height: l + 2 + "px" }); i.TextAreaExpander(0, 1e3); n = i; Ct(s); Lt(o); kt(u); i.empty(); i.val(a); i.css({ width: f + "px", height: l + "px" }); var d = function (e, t) { e.rotate(t); e.data("rotation", p) }; if (p != 0) d(i, p); else i.data("rotation", p); var v = function (e, t) { if (t.data("rotating")) { var n = t.data("rotation"); if (e == "r") n += 1; else n -= 1; t.rotate(n); t.data("rotation", n); window.setTimeout(function () { v(e, t) }, 15) } }; $("#canvas-droppable").append(t); t.show() }; $("#color-picker-open").button({ text: false }); $("#color-picker-open").click(function () { $("#fill-color-roller").slideToggle(1e3) }); var Ct = function (e) { M = e; y.css({ fontFamily: M }); n.css({ fontFamily: M }) }; g.find("option").each(function (e) { if ($(this).attr("value") == M) { $(this).attr("selected", "selected"); return false } }); g.change(function (e) { Ct($(this).val()) }); N.font = _ + "px " + M; N.textBaseline = O; N.fillStyle = P; N.strokeStyle = H; var kt = function (e) { _ = e; c.html(_); N.font = _ + "px " + M; d.css({ fontSize: _ + "px" }); n.css({ fontSize: _ + "px" }) }; f.slider({ orientation: "horizontal", range: "min", min: 10, max: 100, value: _, slide: function (e, t) { kt(t.value) } }); c.html(_); d.css({ font: _ + "px " + M }); var Lt = function (e) { P = e; m.css("color", P); N.fillStyle = P; d.css({ color: P }); n.css({ color: P }); J.data("fillColor", P) }; v.farbtastic(Lt); o.slider({ orientation: "horizontal", range: "min", min: 1, max: 30, value: A, slide: function (e, t) { u.html(t.value); A = t.value; a.css({ width: A, height: A }) } }); u.html(A); a.css({ width: A, height: A, backgroundColor: H }); var At = function (e) { H = e; s.css("backgroundColor", H); N.strokeStyle = H; a.css({ backgroundColor: H }) }; r.farbtastic(At); $.farbtastic(r).setColor(H); S.click(function () { var e = {}; var t = $("#image-url").val(); $.getJSON("comix/image_from_url", { imageurl: t }, function (e) { if (!e) { alert("Response is not object"); return } if (e.error) { alert(e.error); return } if (e.image) { var t = new Image; t.src = e.image; Tt($(t)) } }).error(function (e) { alert(e) }) }); $("#get-image-file").click(function () { $.ajaxFileUpload({ url: "image_from_file", secureuri: false, fileElementId: "imagefile", dataType: "json", beforeSend: function () { $("#loading").show() }, complete: function () { $("#loading").hide() }, success: function (e, t) { if (!e) { alert("Response is not object"); return } if (e.error) { alert(e.error); return } if (e.image) { var n = new Image; n.src = e.image; Tt($(n)) } }, error: function (e, t, n) { alert("Пройзошла ошибка.") } }); return false }); var Ot = function (e, t, n) { n.save(); n.beginPath(); n.lineCap = "round"; n.moveTo(e.x, e.y); n.lineTo(t.x, t.y); n.stroke(); n.closePath(); n.restore() }; var Mt = function (e, t, n) { n.save(); n.lineWidth = A; n.strokeStyle = H; n.lineCap = "round"; n.beginPath(); n.moveTo(e.x, e.y); n.lineTo(t.x, t.y); n.stroke(); n.closePath(); n.restore() }; var _t = function (e, t, n) { var r = Math.max(e.x, t.x) - Math.abs(e.x - t.x) / 2; var i = Math.max(e.y, t.y) - Math.abs(e.y - t.y) / 2; n.beginPath(); var s = Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2)); n.arc(r, i, s / 2, 0, Math.PI * 2, true); n.stroke(); n.closePath() }; var Dt = function (e, t, n) { var r = Math.max(e.x, t.x) - Math.abs(e.x - t.x) / 2; var i = Math.max(e.y, t.y) - Math.abs(e.y - t.y) / 2; n.beginPath(); var s = Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2)); n.arc(r, i, s / 2, 0, Math.PI * 2, true); n.fill(); n.closePath() }; var Pt = function (e, n, r, i, s) { w = t.width; var o = { x: 0, y: e }; var u = { x: w, y: e }; if (e == 0) { Ot(o, u, N) } else { if (i) { o.x = 0; o.y = e; u.x = w / 2; u.y = e; Ot(o, u, N) } if (s) { o.x = w / 2; o.y = e; u.x = w; u.y = e; Ot(o, u, N) } } o.x = 0; o.y = e; u.x = 0; u.y = e + n; Ot(o, u, N); if (r) { o.x = w / 2; o.y = e; u.x = w / 2; u.y = e + n; Ot(o, u, N) } o.x = w; o.y = e; u.x = w; u.y = e + n; Ot(o, u, N) }; var Ht = function () { w = t.width; h = t.height; var e = { x: 0, y: h }; var n = { x: w, y: h }; Ot(e, n, N) }; var Bt = function () { K.save(); K.beginPath(); K.clearRect(0, 0, t.width, t.height); K.closePath(); K.restore() }; var jt = function () { N.save(); N.beginPath(); N.fillStyle = "#ffffff"; N.fillRect(0, 0, t.width, t.height); N.closePath(); N.strokeStyle = "#000000"; var e = 0; var n; for (var r = 0; r < U; r++) { n = $(".pcc" + (r + 1)); e = r * X + X / 2 + 40; n.position({ of: "#rage-maker-container", at: "left top", my: "left top", offset: "-20 " + e, collision: "none" }); var i = false; if (n.find('[name="pcb"]').is(":checked")) i = true; if (r != 0) { n = $(".pcctl" + r); e = r * X + 45; n.position({ of: "#rage-maker-container", at: "left top", my: "left top", offset: "-20 " + e, collision: "none" }); var s = false; if (n.find('[name="pcb"]').is(":checked")) s = true; n = $(".pcctr" + r); n.position({ of: "#rage-maker-container", at: "right top", my: "left top", offset: "+7 " + e, collision: "none" }); var o = false; if (n.find('[name="pcb"]').is(":checked")) o = true } else { var s = true; var o = true } Pt(r * X, X, i, s, o) } Ht(); N.restore() }; jt(); var Ft = function (t, n) { p = e.offset(); n.x = t.pageX - p.left; n.y = t.pageY - p.top; return n }; var It = function (e, t, n) { p = n.offset(); t.x = e.pageX - p.left; t.y = e.pageY - p.top; return t }; shortcut.add("Ctrl+z", Rt); var Ut = function (t, n) { var r = e.offset(); var i = n.find("div > img").first(); var s = i.parent().offset(); t.save(); var o = i.width(); var u = i.height(); var a = i.data("rotation"); var f = i.data("flipped"); if (f) a = -a; var l = Vt(a); var c = -o / 2; var h = -u / 2; var p = s.left + 1 - r.left + o / 2; var d = s.top + 1 - r.top + u / 2; t.translate(p, d); if (f) t.scale(-1, 1); t.rotate(l); t.globalAlpha = q; t.drawImage(i.get(0), c, h, o, u); t.restore() }; var zt = function (t, n) { var r = e.offset(); var i = n.find(".drawcanvas-container > canvas").first(); var s = i.offset(); t.save(); var o = i.width(); var u = i.height(); var a = -o / 2; var f = -u / 2; var l = s.left - r.left + o / 2; var c = s.top - r.top + u / 2; t.translate(l, c); t.globalAlpha = q; t.drawImage(i.get(0), a, f, o, u); t.restore() }; var Wt = function (e, t, n) { if (t.length <= 0) return []; var r = t.split(" "); var i = " "; if (r.length == 1) { r = t; i = "" } var s = [], o = r[0], u = n + 2, a = 0; if (r.length == 1) { s.push(o); return s } var f = 1; for (var l = 1; l < r.length; l++) { var c = r[l], a = e.measureText(o + c).width; if (a < u) { o += i + c; f++ } else if (f == 1) { var h = Wt(e, o, n); for (var p in h) { s.push(h[p]) } o = c; f = 1 } else { s.push(o); o = c; f = 1 } if (l === r.length - 1) { if (f == 1) { var h = Wt(e, o, n); for (var p in h) { s.push(h[p]) } } else { s.push(o) } break } } return s }; var Xt = function (t, n) { t.save(); t.textBaseline = O; var r = e.offset(); var i = n.find("textarea").offset(); var s = n.find(".text-container textarea"); var o = n.find("textarea"); var u = o.position(); var a = i.left - u.left; var f = i.top - u.top; var l = s.width(); var c = s.height(); var h = -s.data("rotation"); var p = Vt(h); var d = -l / 2; var v = -c / 2; var m = a - r.left + l / 2; var g = f - r.top + c / 2; t.translate(m, g); t.rotate(p); var y = o.val().split("\n"); var b = o.css("font-size"); var w = o.css("font-family"); t.fillStyle = o.css("color"); var E = Math.floor(parseInt(b.replace("px", "")) * 1.2); t.font = b + " " + w; for (var S in y) { var x = Wt(t, y[S], l); for (var T in x) { t.fillText(x[T], d + 3, v + 2); if (T + 1 != x.length) { v += E } } v += E } t.restore() }; var Vt = function (e) { return e * (Math.PI / 180) }; e.droppable({ accept: ".allow-canvas-droppable", drop: function (t, n) { var r = e.offset(); var i = n.offset.left - r.left; var s = n.offset.top - r.top; Tt(n.draggable.find("img").clone(), s, i) } }); e.click(St); Storage.prototype.setObject = function (e, t) { this.setItem(e, $.toJSON(t)) }; Storage.prototype.getObject = function (e) { var t = this.getItem(e); return t && $.parseJSON(t) }; $.fn.reverse = [].reverse; var $t = function () { $(".layer").each(function (e) { l = $(this).data("layer"); wt(l) }) }; var Jt = function () { $t(); jt(); if (typeof generator_comic_id != "undefined") { $(".ajax-loader-img").position({ of: $("#canvas-droppable") }).show() } else { backup = localStorage.getObject("latest_comics"); Kt(backup) } }; var Kt = function (e) { if (e != undefined) { if (e.version == undefined) { newBackup = {}; newBackup.layers = []; newBackup.version = 1; if (e.canvases != undefined) { cbl = e.canvases; for (cb in cbl) { newBackup.layers.push({ canvas: cbl[cb] }) } } if (e.images != undefined) { ibl = e.images; for (ib in ibl) { newBackup.layers.push({ image: ibl[ib] }) } } if (e.texts != undefined) { tbl = e.texts; for (tb in tbl) { newBackup.layers.push({ text: tbl[tb] }) } } localStorage.setObject("latest_comics", newBackup); e = newBackup } if (e.version == 1) { if (typeof e.panes != "undefined") { if (e.panes < R) { var t = R - e.panes; for (i = 0; i < t; i++) dt() } else if (e.panes > R) { var t = e.panes - R; for (i = 0; i < t; i++) pt() } } bl = e.layers; for (b in bl) { b = bl[b]; if (b.canvas != undefined) { cb = b.canvas; xt(cb) } else if (b.image != undefined) { ib = b.image; Tt(ib.image, ib.position.top, ib.position.left, ib) } else if (b.text != undefined) { tb = b.text; Nt(tb) } } } } }; var Qt = function () { var e = {}; e.layers = []; e.panes = R; e.rows = U; e.version = 1; $(".layer").reverse().each(function (t) { l = $(this).data("layer"); if (l.hasClass("canvas-dragger")) { e.layers.push({ canvas: Gt(l) }) } else if (l.hasClass("image-dragger")) { e.layers.push({ image: Yt(l) }) } else if (l.hasClass("text-dragger")) { e.layers.push({ text: Zt(l) }) } }); localStorage.setObject("latest_comics", e) }; var Gt = function (e) { var t = {}; t.position = e.position(); jcc = e.find(".drawcanvas-container"); t.size = {}; t.size.width = jcc.css("width"); t.size.height = jcc.css("height"); $("canvas", e).each(function () { t.canvas = this.toDataURL("image/png") }); return t }; var Yt = function (e) { var t = {}; t.position = e.position(); $("img", e).each(function () { t.size = { width: $(this).width(), height: $(this).height() }; t.image = this.src; D = $(this); t.rotation = D.data("rotation"); t.flipped = D.data("flipped") }); return t }; var Zt = function (e) { var t = {}; var n = e.find("textarea"); t.position = e.position(); t.size = {}; t.size.width = n.width(); t.size.height = n.height(); t.font_size = parseInt(n.css("fontSize")); t.font_family = n.css("fontFamily"); t.font_color = n.css("color"); t.text = n.val(); t.rotation = n.data("rotation"); return t }; var en = function () { jt(); $(".layer").reverse().each(function (e) { l = $(this).data("layer"); l.show() }) }; var tn = function () { Qt(); $(".layer").reverse().each(function (e) { l = $(this).data("layer"); if (l.hasClass("canvas-dragger")) { zt(N, l); l.hide() } else if (l.hasClass("image-dragger")) { Ut(N, l); l.hide() } else if (l.hasClass("text-dragger")) { Xt(N, l); l.hide() } }) }; autoBackup = function () { Qt(); setTimeout("autoBackup()", 1e4) }; Jt(); setTimeout("autoBackup()", 1e4); $("#publish").click(function () { if ($(this).hasClass("disabled")) return false; $("#publish, #save-file, #hide-preview").addClass("disabled"); $("#comics-uploading").show(); var e = []; $.each($(".text-dragger textarea"), function (t, n) { e.push($(n).val().replace(/\n/g, " ")) }); $.post("/comix/upload_canvas", { image: t.toDataURL("image/png"), texts: JSON.stringify(e) }, function (e) { if (!e || !e.comics_id || e.error) { $("#publish, #save-file, #hide-preview").removeClass("disabled"); $("#comics-uploading").hide(); if (e.error == 1) { alert("Внимание, привышен лимит!\nДопустимый размер Вашей работы - 5мб.") } else { alert("Возникла ошибка с сохранением комикса.\nПопробуйте сохранить еще раз через несколько минут.") } return } localStorage.setObject("latest_comics", {}); if (e.comics_id) window.location = "/upload?image_url=comics:" + e.comics_id }, "json") }); $("#build-preview").click(function (e) { e.preventDefault(); if ($(this).hasClass("disabled")) return false; var n = $(".layer").length; if (n < 2) { alert("Необходимо добавить в комикс минимум два элемента."); return } tn(); $("#saveFileForm").find("input").val(t.toDataURL("image/png")); $("#preview-controls").hide(); $("#save-controls").show() }); $("#hide-preview").click(function (e) { e.preventDefault(); if ($(this).hasClass("disabled")) return false; en(); $("#saveFileForm").find("input").val(""); $("#preview-controls").show(); $("#save-controls").hide() }) })